dnl Process this file with autoconf to produce a configure script.
dnl
dnl There are a couple of environment defined variables which this script
dnl makes use of in addition to the standard CFLAGS/LDFLAGS/etc. These are:
dnl
dnl RELEASE_TAG        - Debian release tag which is put to debian/changelog
dnl SNAPSHOT_VERSION   - snapshot version to add to version number
dnl BINARY_BRANCH      - the value is added to all source/binary packages
dnl SOURCE_REVISION    - Revision of the source-tree, will added to the version string
dnl
AC_INIT(src/main.c)

PKG_PROG_PKG_CONFIG
dnl ***************************************************************************
dnl definitions

PACKAGE="syslog-ng"
VERSION="`cat $srcdir/VERSION`"

dnl ***************************************************************************
dnl dependencies

GLIB_MIN_VERSION="2.10.1"
EVTLOG_MIN_VERSION="0.2"
OPENSSL_MIN_VERSION="0.9.8"
LIBDBI_MIN_VERSION="0.8.0"
PCRE_MIN_VERSION="7.3"

dnl ***************************************************************************
dnl Initial setup

ostype=`uname -s`

if test -r $srcdir/dist.conf; then
        # read defaults, dist.conf does not change
        # values for parameters that are already set
        . $srcdir/dist.conf
fi

if test -z "$RELEASE_TAG"; then
        RELEASE_TAG=unstable
fi


if test "`uname -s`" = "Linux";then
        CURRDATE=`date -R`
else
        CURRDATE=`date +"%a, %d %b %Y %H:%M:%S %Z"`
fi

AM_INIT_AUTOMAKE($PACKAGE, $VERSION, no-define)
if test -n "$SNAPSHOT_VERSION"; then
	VERSION=$VERSION+$SNAPSHOT_VERSION
fi

if test "x$prefix" = "xNONE"; then
        prefix=$ac_default_prefix
fi
pidfiledir="${localstatedir}"

AM_CONFIG_HEADER(config.h)

dnl ***************************************************************************
dnl Arguments

AC_ARG_WITH(libnet,
   [  --with-libnet=path      use path to libnet-config script],
   ,
   [with_libnet=""])

AC_ARG_WITH(pidfile-dir,
   [  --with-pidfile-dir=path   Use path as the directory for storing pidfiles],
   pidfiledir=$with_pidfile_dir)
	
AC_ARG_WITH(timezone-dir,
   [  --with-timezone-dir=path   Use path as the directory to get the timezone files],
   timezonedir=$with_timezone_dir)

AC_ARG_WITH(ld-library-path,
   [  --with-ld-library-path=path  Set LD_LIBRARY_PATH during runtime to the value given],
   env_ld_library_path=$with_ld_library_path)

AC_ARG_ENABLE(debug, 
              [  --enable-debug      Enable debugging code.],, enable_debug="no")

AC_ARG_ENABLE(env-wrapper,
              [  --enable-env-wrapper    Enable wrapper program to set up various environment variables],, enable_env_wrapper=auto)

AC_ARG_ENABLE(gprof, 
              [  --enable-gprof      Enable gcc profiling.],, enable_gprof="no")

AC_ARG_ENABLE(memtrace, 
              [  --enable-memtrace   Enable alternative leak debugging code.])
              
AC_ARG_ENABLE(ssl,
              [  --enable-ssl        Enable SSL support.],,enable_ssl="auto")

AC_ARG_ENABLE(dynamic-linking,
              [  --enable-dynamic-linking        Link glib and eventlog dynamically instead of statically.],,enable_dynamic_linking="auto")

AC_ARG_ENABLE(static-linking,
              [  --enable-static-linking         Link everything statically.],,enable_static_linking="auto")

AC_ARG_ENABLE(mixed-linking,
              [  --enable-mixed-linking          Link 3rd party libraries statically, system libraries dynamically],,enable_mixed_linking="auto")

AC_ARG_ENABLE(ipv6,
              [  --enable-ipv6           Enable support for IPv6.],,enable_ipv6="auto")

AC_ARG_ENABLE(tcp-wrapper,
              [  --enable-tcp-wrapper    Enable support for TCP wrappers.],,enable_tcp_wrapper="auto")

AC_ARG_ENABLE(spoof-source,
              [  --enable-spoof-source   Enable support for spoofed source addresses.]
              ,,enable_spoof_source="auto")

AC_ARG_ENABLE(sun-streams,
              [  --enable-sun-streams    Enable support for Solaris /dev/log STREAMS device.]
              ,,enable_sun_streams="auto")

AC_ARG_ENABLE(sun-door,
              [  --enable-sun-door       Enable support for Solaris /var/run/syslog_door door device.]
              ,,enable_sun_door="auto")

AC_ARG_ENABLE(sql,
	      [  --enable-sql            Enable support for SQL destinations. (default: auto)]
	      ,,enable_sql="auto")

AC_ARG_ENABLE(linux-caps,
              [  --enable-linux-caps     Enable support for managing Linux capabilities (default: auto)]
              ,,enable_linux_caps="auto")

AC_ARG_ENABLE(pcre,
              [  --enable-pcre           Enable support for Perl Compatible Regular Expressions (default: auto)]
              ,,enable_pcre="auto")

AC_ARG_ENABLE(gcov,
              [  --enable-gcov           Enable coverage profiling (default: no)]
              ,,enable_gcov="no")


dnl ***************************************************************************
dnl Checks for programs.
AC_PROG_CC
AM_PROG_CC_STDC
AC_PROG_CC_C99
if test "x$ac_cv_prog_cc_c99" = "xno"; then
	AC_MSG_ERROR("C99 standard compliant C compiler required. Try GCC 3.x or later.")
fi
AC_PROG_YACC
AM_PROG_LEX
AC_PROG_MAKE_SET
AC_PROG_RANLIB

dnl ***************************************************************************
dnl Set up CFLAGS

if test "x$ac_compiler_gnu" = "xyes"; then
        CFLAGS="${CFLAGS} -Wall"
        if test "x$enable_debug" = "xyes"; then
                CFLAGS="${ac_cv_env_CFLAGS_value} -Wall -g"
        fi

        if test "x$enable_gprof" = "xyes"; then
                CFLAGS="${CFLAGS} -pg"
        fi
        if test "x$enable_gcov" = "xyes"; then
                CFLAGS="${CFLAGS} -fprofile-arcs -ftest-coverage"
        fi
fi


AC_SYS_LARGEFILE

# FIXME: skip tests on unsupported platforms/architectures...
case "$ostype" in
	HP-UX)
		if $CC -v 2>&1 | grep gcc > /dev/null; then
			CFLAGS="${CFLAGS} -U_XOPEN_SOURCE -U_XOPEN_SOURCE_EXTENDED -D_HPUX_SOURCE"
			LDFLAGS="${LDFLAGS} -lcl"
			AC_DEFINE(HAVE_BROKEN_PREAD, 1, [define if your platform has a broken pread/pwrite (e.g. HP-UX)])
			AC_MSG_WARN([NOTE: on HP-UX with gcc, you might need to edit sys/socket.h manually or you'll get compilation errors])
		fi
		;;
	AIX)
		if test "$ac_cv_sys_large_files" -ne 0; then
			CFLAGS="${CFLAGS} -D_LARGE_FILES=1"
		fi
		;;
	OSF1)
		CFLAGS="${CFLAGS} -D_XOPEN_SOURCE=500 -D_XOPEN_SOURCE_EXTENDED -D_OSF_SOURCE -D_POSIX_C_SOURCE"
		;;
esac 


dnl ***************************************************************************
dnl How to do static linking?
dnl ***************************************************************************

AC_MSG_CHECKING(how to enable static linking for certain libraries)
ldversion=`ld -V 2>&1 | head -1`
if echo $ldversion | egrep "GNU|Solaris" > /dev/null; then
        LD_START_STATIC="-Wl,-Bstatic"
        LD_END_STATIC="-Wl,-Bdynamic"
        AC_MSG_RESULT(GNU or Solaris)
elif test $ostype = "HP-UX" > /dev/null; then
        LD_START_STATIC="-Wl,-a,archive"
        LD_END_STATIC="-Wl,-a,shared_archive"
        AC_MSG_RESULT(HP-UX)
elif test "$ostype" = "AIX"; then
        LD_START_STATIC="-Wl,-bstatic"
        LD_END_STATIC="-Wl,-bdynamic"
        AC_MSG_RESULT(AIX)
else
        LD_START_STATIC=""
        LD_END_STATIC=""
        AC_MSG_RESULT([no clues, linking everything dynamically, please send appropriate ld arguments to syslog-ng@lists.balabit.hu])
fi

dnl ***************************************************************************
dnl Miscellanneous headers
dnl ***************************************************************************

AC_HEADER_STDC
AC_CHECK_HEADER(dmalloc.h)
AC_CHECK_HEADERS(strings.h getopt.h stropts.h sys/strlog.h door.h sys/capability.h sys/prctl.h)
AC_CHECK_HEADERS(tcpd.h)


dnl ***************************************************************************
dnl Header checks
dnl ***************************************************************************

dnl Checks for typedefs, structures, and compiler characteristics.
AC_STRUCT_TM

AC_CHECK_MEMBER(struct tm.tm_gmtoff,AC_DEFINE(HAVE_STRUCT_TM_TM_GMTOFF,1,[Whether you have tm_gmtoff field in struct tm]),,[
#if TM_IN_SYS_TIME
#include <sys/time.h>
#else
#include <time.h>
#endif])

AC_CACHE_CHECK(for I_CONSLOG, blb_cv_c_i_conslog,
  [AC_EGREP_CPP(I_CONSLOG,
[
#include <sys/strlog.h>
I_CONSLOG
],
  blb_cv_c_i_conslog=no, blb_cv_c_i_conslog=yes)])

old_CPPFLAGS=$CPPFLAGS
CPPFLAGS=-D_GNU_SOURCE
AC_CACHE_CHECK(for O_LARGEFILE, blb_cv_c_o_largefile,
  [AC_EGREP_CPP(O_LARGEFILE,
[
#include <fcntl.h>
O_LARGEFILE
],
  blb_cv_c_o_largefile=no, blb_cv_c_o_largefile=yes)])
CPPFLAGS=$old_CPPFLAGS

if test "x$blb_cv_c_o_largefile" = "xyes"; then
        AC_DEFINE(HAVE_O_LARGEFILE, 1, [O_LARGEFILE is present])
fi

AC_CACHE_CHECK(for struct sockaddr_storage, blb_cv_c_struct_sockaddr_storage,
  [AC_EGREP_HEADER([sockaddr_storage], sys/socket.h, blb_cv_c_struct_sockaddr_storage=yes,blb_cv_c_struct_sockaddr_storage=no)])

if test "$blb_cv_c_struct_sockaddr_storage" = "yes"; then
	AC_DEFINE(HAVE_STRUCT_SOCKADDR_STORAGE,[1],[struct sockaddr_storage is present on your system])
fi

AC_CACHE_CHECK(for struct sockaddr_in6, blb_cv_c_struct_sockaddr_in6,
  [AC_EGREP_HEADER([sockaddr_in6], netinet/in.h, blb_cv_c_struct_sockaddr_in6=yes,blb_cv_c_struct_sockaddr_in6=no)])

AC_CACHE_CHECK(for PR_SET_KEEPCAPS, blb_cv_keepcaps,
  [AC_EGREP_CPP(PR_SET_KEEPCAPS, 
[
#include <sys/prctl.h>

PR_SET_KEEPCAPS
],
  blb_cv_keepcaps=no,
  blb_cv_keepcaps=yes)])

if test "x$blb_cv_keepcaps" = "xyes"; then
	AC_DEFINE(HAVE_PR_SET_KEEPCAPS, 1, [have PR_SET_KEEPCAPS])
fi


dnl ***************************************************************************
dnl Checks for libraries
AC_CHECK_LIB(door, door_create, BASE_LIBS="$BASE_LIBS -ldoor")
AC_CHECK_LIB(socket, socket, BASE_LIBS="$BASE_LIBS -lsocket")
AC_CHECK_LIB(rt, nanosleep, BASE_LIBS="$BASE_LIBS -lrt")
AC_CHECK_LIB(nsl, gethostbyname, BASE_LIBS="$BASE_LIBS -lnsl")
AC_CHECK_LIB(regex, regexec, REGEX_LIBS="-lregex")
AC_CHECK_LIB(resolv, res_init, RESOLV_LIBS="-lresolv")

if test "x$enable_linux_caps" = "xyes" -o "x$enable_linux_caps" = "xauto"; then
	AC_CHECK_LIB(cap, cap_set_proc, LIBCAP_LIBS="-lcap")
fi
if test "x$enable_pcre" = "xyes" -o "x$enable_pcre" = "xauto"; then
	PKG_CHECK_MODULES(PCRE, libpcre >= $PCRE_MIN_VERSION,, PCRE_LIBS="")
	if test -z "$PCRE_LIBS"; then
		if test "x$enable_pcre" = "xyes"; then
			AC_MSG_ERROR(Cannot find pcre version >= $PCRE_MIN_VERSION.)
		else
			AC_MSG_WARN(Cannot find pcre version >= $PCRE_MIN_VERSION. pcre support disabled.)
		fi
	fi
fi

if test -z "$PCRE_LIBS"; then
		PCRE_LIBS=""
		PCRE_CFLAGS=""
fi

if test "x$enable_env_wrapper" = "xauto"; then
	if test "x$env_ld_library_path" != "x"; then
		enable_env_wrapper="yes"
	else
		enable_env_wrapper="no"
	fi
fi

AC_CHECK_FUNCS(strdup strtol strtoll strtoimax inet_aton inet_ntoa getopt_long getaddrinfo getutent pread pwrite strcasestr memrchr)

old_LIBS=$LIBS
AC_CACHE_CHECK(for TCP wrapper library,
                blb_cv_c_lwrap,

for libwrap in "-lwrap" "/usr/local/lib/libwrap.a"; do
        LIBS="$old_LIBS $libwrap"

        [AC_TRY_LINK(,
        [
}

int allow_severity;
int deny_severity;
extern int hosts_access(void);

int foo(void)
{
        hosts_access();
],
        [blb_cv_c_lwrap=$libwrap
        break],
        blb_cv_c_lwrap="")
done

])
LIBS=$old_LIBS
LIBWRAP_LIBS=$blb_cv_c_lwrap


dnl ***************************************************************************
dnl OpenSSL headers/libraries
dnl ***************************************************************************

# openssl is needed for:
#  * TLS support

dnl check OpenSSL static linking 
PKG_CHECK_MODULES(OPENSSL, openssl >= $OPENSSL_MIN_VERSION,, OPENSSL_LIBS="")

if test -n "$OPENSSL_LIBS"; then
        dnl required for openssl, but only when linking statically
        save_LIBS="$LIBS"
        AC_CHECK_LIB(dl, dlsym, DL_LIBS="-ldl")
        LIBS=$save_LIBS

        dnl required for openssl, but only when linking statically
        save_LIBS="$LIBS"
        AC_CHECK_LIB(z, inflate, ZLIB_LIBS="-lz")
        LIBS=$save_LIBS

        save_CPPFLAGS="$CPPFLAGS"
        CPPFLAGS="$CPPFLAGS $OPENSSL_CFLAGS"
        CPPFLAGS="$save_CPPFLAGS"
else
        OPENSSL_LIBS=""
        OPENSSL_CFLAGS=""
fi

if test "x$OPENSSL_LIBS" != "x"; then
        if test "x$enable_ssl" = "xauto"; then
	        enable_ssl="yes"
        fi
else
        enable_ssl="no"
fi

dnl ***************************************************************************
dnl libdbi headers/libraries
dnl ***************************************************************************

AC_CHECK_LIB(dl, dlsym, DL_LIBS="-ldl")
PKG_CHECK_MODULES(LIBDBI, dbi >= $LIBDBI_MIN_VERSION, libdbi_pkgconfig_not_found="0", libdbi_pkgconfig_not_found="1")

if test "$libdbi_pkgconfig_not_found" -eq 1; then
	dnl if libdbi has no .pc file, try it without one
	AC_CHECK_LIB(dbi, dbi_initialize, LIBDBI_LIBS="-ldbi"; LIBDBI_CFLAGS="-I/usr/include")
fi


dnl ***************************************************************************
dnl Some more checks based on the detected settings above

if test "x$ac_cv_lib_door_door_create" = "xyes"; then
        AC_CHECK_HEADERS(pthread.h)
        AC_CHECK_LIB(pthread, pthread_create)
fi

AC_MSG_CHECKING(for LIBNET)
if test "x$with_libnet" = "x"; then
        LIBNET_CONFIG="`which libnet-config`"
else
        LIBNET_CONFIG="$with_libnet/libnet-config"
fi
if test -n "$LIBNET_CONFIG" -a -x "$LIBNET_CONFIG"; then
        LIBNET_CFLAGS="`$LIBNET_CONFIG --defines`"
        LIBNET_LIBS="`$LIBNET_CONFIG --libs`"
        AC_MSG_RESULT(yes)
else
        LIBNET_LIBS=
        AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to enable Sun STREAMS support)
if test "x$ac_cv_header_stropts_h" = "xyes" -a \
        "x$ac_cv_header_sys_strlog_h" = "xyes" -a \
        "x$enable_sun_streams" != "xno" -a \
        "x$blb_cv_c_i_conslog" != "xno" -o \
        "x$enable_sun_streams" = "xyes"; then
        enable_sun_streams=yes
        AC_MSG_RESULT(yes)
else
        enable_sun_streams=no
        AC_MSG_RESULT(no)
fi

AC_MSG_CHECKING(whether to enable Sun door support)
if test "x$enable_sun_streams" = "xyes" -a "x$ac_cv_header_door_h" = "xyes" -a "x$ac_cv_header_pthread_h" = "xyes" -a "x$enable_sun_door" != "xno" -o "x$enable_sun_door" = "xyes"; then
        enable_sun_door=yes
        AC_MSG_RESULT(yes)
else
        enable_sun_door=no
        AC_MSG_RESULT(no)
fi

if test "x$enable_tcp_wrapper" = "xauto"; then
	AC_MSG_CHECKING(whether to enable TCP wrapper support)
        if test "x$ac_cv_header_tcpd_h" = "xyes" -a "x$blb_cv_c_lwrap" != "x"; then
                enable_tcp_wrapper=yes
                AC_MSG_RESULT(yes)
        else
                LIBWRAP_LIBS=""
                AC_MSG_RESULT(no)
                enable_tcp_wrapper=no
        fi
elif test "x$enable_tcp_wrapper" != "xyes"; then
        LIBWRAP_LIBS=""
fi


if test "x$enable_spoof_source" = "xauto"; then
	AC_MSG_CHECKING(whether to enable spoof source support)
        if test "x$LIBNET_LIBS" != "x"; then
                enable_spoof_source=yes
                AC_MSG_RESULT(yes)
	else
		enable_spoof_source=no
                LIBNET_LIBS=
		LIBNET_CFLAGS=
		AC_MSG_RESULT(no)
        fi
elif test "x$enable_spoof_source" != "xyes"; then
	LIBNET_CFLAGS=""
	LIBNET_LIBS=""
	enable_spoof_source=no
fi

if test "x$enable_ipv6" = "xauto"; then
	AC_MSG_CHECKING(whether to enable IPv6 support)
        if test "x$blb_cv_c_struct_sockaddr_in6" = "xyes"; then
                enable_ipv6=yes
                AC_MSG_RESULT(yes)
        else
                enable_ipv6=no
                AC_MSG_RESULT(no)
        fi
fi

if test "x$enable_sql" = "xauto"; then
	AC_MSG_CHECKING(whether to enable SQL support)
	if test "x$LIBDBI_LIBS" != "x"; then
		enable_sql="yes"
		AC_MSG_RESULT(yes)
	else
		enable_sql="no"
		AC_MSG_RESULT(no)
	fi
fi

if test "x$enable_linux_caps" = "xauto"; then
        AC_MSG_CHECKING(whether to enable Linux capability support)
        if test "x$ac_cv_header_sys_capability_h" = "xyes"; then
                enable_linux_caps="yes" 
        else
                enable_linux_caps="no"
        fi
        AC_MSG_RESULT([$enable_linux_caps])
fi

if test "x$enable_pcre" = "xauto"; then
        AC_MSG_CHECKING(whether to enable PCRE support)
        if test "x$PCRE_LIBS" != "x"; then
                enable_pcre="yes" 
        else
                enable_pcre="no"
        fi
        AC_MSG_RESULT([$enable_pcre])
fi

GLIB_ADDONS=""
if test "x$enable_sql" = "xyes"; then
	GLIB_ADDONS="gthread"
fi

AM_PATH_GLIB_2_0($GLIB_MIN_VERSION,,
    AC_MSG_ERROR(Cannot find GLIB version >= $GLIB_MIN_VERSION: is pkg-config in path?), $GLIB_ADDONS)


PKG_CHECK_MODULES(EVTLOG, eventlog >= $EVTLOG_MIN_VERSION,,
                AC_MSG_ERROR(Cannot find eventlog version >= $EVTLOG_MIN_VERSION: is pkg-config in path?))

if test "x$enable_spoof_source" = "xyes"; then
	AC_MSG_CHECKING(for LIBNET)
        if test "x$with_libnet" = "x"; then
                LIBNET_CONFIG=`which libnet-config`
        else
                LIBNET_CONFIG=$with_libnet/libnet-config
        fi
        if test -x "$LIBNET_CONFIG"; then
                LIBNET_CFLAGS="`$LIBNET_CONFIG --defines`"
                LIBNET_LIBS="`$LIBNET_CONFIG --libs`"
                AC_MSG_RESULT(yes)
        else
                LIBNET_LIBS=
                AC_ERROR(libnet-config not found)
        fi
fi

# HACK: threading libs and the dynamic linker lib (rt) mustn't be linked statically on solaris,,,
dynamic_threads () {
	case "$ostype" in
		SunOS)
			# sed on solaris 8/9 is soooo '80s we have to do it with perl...
			RTLIBS=`echo $LIBS |  tr ' ' '\n' | perl -ne '/^-l(?:pthread|thread|rt)$/i && print $_;' | tr '\n' ' '`
			LIBS="`echo $LIBS | perl -ne '$_ =~ s/(\B-l(pthread|thread|rt))\b//g; print $_;'` $RTLIBS"
			;;
		*)
		;;
	esac
}

case "$ostype" in
	FreeBSD)
		GLIB_LIBS="$GLIB_LIBS -lintl"
		;;
esac

old_LIBS=$LIBS
LIBS="$LD_START_STATIC $GLIB_LIBS $LD_END_STATIC"

dynamic_threads

AC_CACHE_CHECK(for static GLib libraries,
               blb_cv_static_glib,
[AC_TRY_LINK([
extern void g_hash_table_new(void);
], [

void (*fn)(void) = g_hash_table_new;

return (int) fn;

],
blb_cv_static_glib=yes,
blb_cv_static_glib=no)])
LIBS=$old_LIBS

old_CPPFLAGS=$CPPFLAGS
CPPFLAGS="$GLIB_CFLAGS"

AC_CACHE_CHECK(sanity checking Glib headers,
               blb_cv_glib_sane,
[AC_TRY_RUN([
#include <glib.h>

int main()
{
  if (sizeof(long) != GLIB_SIZEOF_LONG)
    return 1;
  return 0;
}
],
blb_cv_glib_sane=yes,
blb_cv_glib_sane=no,
blb_cv_glib_sane=yes)])
CPPFLAGS=$old_CPPFLAGS

if test "x$blb_cv_glib_sane" = "xno"; then
	AC_MSG_ERROR([Glib headers inconsistent with current compiler setting. You might be using 32 bit Glib with a 64 bit compiler, check PKG_CONFIG_PATH])
fi


if test "x$enable_ssl" = "xyes" -a "x$enable_dynamic_linking" != "xyes"; then
	dnl check if we can successfully link to openssl statically
	old_LIBS=$LIBS
	old_CFLAGS=$CFLAGS
	CFLAGS="$OPENSSL_CFLAGS"
	dnl FIXME: Read regexp book
	XOPENSSL_LIBS=`echo $OPENSSL_LIBS | tr ' ' '\n' | egrep -v "^-ldld?$" | tr '\n' ' '`
	LIBS="$LD_START_STATIC $XOPENSSL_LIBS $ZLIB_LIBS $LD_END_STATIC $DL_LIBS"

	AC_CACHE_CHECK(for static OpenSSL libraries,
	           blb_cv_static_openssl,
                   [AC_TRY_LINK([
#include <stdio.h>
#include <openssl/ssl.h>
], [
int main()
{
  SSL_library_init();
  SSL_load_error_strings();
  SSLeay_add_all_algorithms();

  exit(0);
}
                   ],
                   blb_cv_static_openssl=yes,
                   blb_cv_static_openssl=no)])
	LIBS=$old_LIBS
	CFLAGS=$old_CFLAGS
	if test "x$blb_cv_static_openssl" = "xyes" ; then
	    	OPENSSL_LIBS=$XOPENSSL_LIBS
	fi
fi

if test "$enable_dynamic_linking" = "auto" -a "$enable_static_linking" = "auto" -a "$enable_mixed_linking" = "auto"; then
	enable_dynamic_linking="yes"
	enable_static_linking="no"
	enable_mixed_linking="no"
fi

linkopts=0
if test "x$enable_dynamic_linking" = "xyes"; then
       linkopts=`expr $linkopts + 1`
fi
if test "x$enable_static_linking" = "xyes"; then
       linkopts=`expr $linkopts + 1`
fi
if test "x$enable_mixed_linking" = "xyes"; then
       linkopts=`expr $linkopts + 1`
fi

if test "$linkopts" -gt 1; then
       AC_MSG_ERROR([You cannot specify multiple linking options at the same time (--enable-dynamic-linking, --enable-static-linking, --enable-mixed-linking).])
fi

if test "x$enable_dynamic_linking" = "xyes"; then
	enable_dynamic_linking="yes"
	enable_static_linking="no"
	enable_mixed_linking="no"
	linking_mode="dynamic"
elif test "x$enable_static_linking" = "xyes"; then
	enable_dynamic_linking="no"
	enable_static_linking="yes"
	enable_mixed_linking="no"
	linking_mode="static"
elif test "x$enable_mixed_linking" = "xyes"; then
	enable_dynamic_linking="no"
	enable_static_linking="no"
	enable_mixed_linking="yes"
	linking_mode="mixed"
fi

if test "x$enable_dynamic_linking" != "xyes" -a "x$blb_cv_static_glib" = "xno"; then
	AC_MSG_ERROR([static GLib libraries not found (a file named libglib-2.0.a), either link GLib dynamically using the --enable-dynamic-linking or install a static GLib])
fi

if test "x$enable_dynamic_linking" != "xyes" -a "x$blb_cv_static_openssl" = "xno"; then
	AC_MSG_ERROR([static OpenSSL libraries not found (libssl.a, libcrypto.a and their external dependencies like libz.a), either link OpenSSL statically using the --enable-dynamic-linking, or install a static OpenSSL])
fi


DEPS_CPPFLAGS="$CPPFLAGS $GLIB_CFLAGS $EVTLOG_CFLAGS $OPENSSL_CFLAGS $LIBNET_CFLAGS $LIBDBI_CFLAGS"
CPPFLAGS="$DEPS_CPPFLAGS -D_GNU_SOURCE -D_LARGEFILE_SOURCE -D_FILE_OFFSET_BITS=64"

if test "x$enable_dynamic_linking" = "xyes"; then
	DEPS_LIBS="$LIBS $BASE_LIBS $LEXLIB $GLIB_LIBS $EVTLOG_LIBS $OPENSSL_LIBS $ZLIB_LIBS $LIBNET_LIBS $LIBWRAP_LIBS $LIBDBI_LIBS $RESOLV_LIBS $LIBCAP_LIBS $PCRE_LIBS $REGEX_LIBS"
elif test "x$enable_static_linking" = "xyes"; then
	DEPS_LIBS="-static $LIBS $BASE_LIBS $LEXLIB $GLIB_LIBS $EVTLOG_LIBS $OPENSSL_LIBS $ZLIB_LIBS $DL_LIBS $LIBNET_LIBS $LIBWRAP_LIBS $LIBDBI_LIBS $RESOLV_LIBS $LIBCAP_LIBS $PCRE_LIBS $REGEX_LIBS"
else
	dnl on our AIX box, it's necessary to add the OpenSSL linking options first 
	dnl to the parameter list, otherwise it tries to link to the wrong version
	dnl of OpenSSL. But Bazsi says it doesn't work on Ubuntu Dapper though. So 
	dnl at least now it remains an ugly exception...
	if test "$ostype" = "AIX"; then
		DEPS_LIBS="$LIBS $BASE_LIBS $RESOLV_LIBS $LD_START_STATIC $OPENSSL_LIBS $LEXLIB $GLIB_LIBS $EVTLOG_LIBS $ZLIB_LIBS $LIBNET_LIBS $LIBWRAP_LIBS $LIBCAP_LIBS $PCRE_LIBS $REGEX_LIBS $LD_END_STATIC $LIBDBI_LIBS $DL_LIBS "
	else
		DEPS_LIBS="$LIBS $BASE_LIBS $RESOLV_LIBS $LD_START_STATIC $LEXLIB $GLIB_LIBS $EVTLOG_LIBS $OPENSSL_LIBS $ZLIB_LIBS $LIBNET_LIBS $LIBWRAP_LIBS $LIBCAP_LIBS $PCRE_LIBS $REGEX_LIBS $LD_END_STATIC $LIBDBI_LIBS $DL_LIBS "
	fi
fi

dynamic_threads

YFLAGS="-d"

enable_value()
{
        if test "x$1" = "xyes" ; then
                echo 1
        else
                echo 0
        fi
}

patheval()
{
        OLD=$1
        NEW=`eval echo $1`
        while test "x$OLD" != "x$NEW"
        do
                OLD=$NEW
                NEW=`eval echo $OLD`
        done
        echo $OLD
}

AC_DEFINE_UNQUOTED(PACKAGE, "$PACKAGE", [package name])
AC_DEFINE_UNQUOTED(VERSION, "$VERSION", [version number])
AC_DEFINE_UNQUOTED(SOURCE_REVISION, "$SOURCE_REVISION", [source revision])
AC_DEFINE_UNQUOTED(LICENSE_VERSION, "$LICENSE_VERSION", [Required license version])

AC_DEFINE_UNQUOTED(PATH_PREFIX, "`patheval $prefix`", [prefix directory])
AC_DEFINE_UNQUOTED(PATH_SYSCONFDIR, "`patheval $sysconfdir`", [sysconfdir])
AC_DEFINE_UNQUOTED(PATH_LOCALSTATEDIR, "`patheval $localstatedir`", [local state directory])
AC_DEFINE_UNQUOTED(PATH_PIDFILEDIR, "`patheval $pidfiledir`", [local state directory])
if test -n "$timezonedir"; then
        AC_DEFINE_UNQUOTED(PATH_TIMEZONEDIR, "`patheval $timezonedir`", [timezone base directory])
fi
if test -n "$env_ld_library_path"; then
        AC_DEFINE_UNQUOTED(ENV_LD_LIBRARY_PATH, "$env_ld_library_path", [set LD_LIBRARY_PATH to this value])
fi

AC_DEFINE_UNQUOTED(ENABLE_SUN_STREAMS, `enable_value $enable_sun_streams`, [have STREAMS support])
AC_DEFINE_UNQUOTED(ENABLE_SUN_DOOR, `enable_value $enable_sun_door`, [have Solaris door support])
AC_DEFINE_UNQUOTED(ENABLE_DEBUG, `enable_value $enable_debug`, [Enable debugging])
AC_DEFINE_UNQUOTED(ENABLE_GPROF, `enable_value $enable_gprof`, [Enable gcc profiling])
AC_DEFINE_UNQUOTED(ENABLE_MEMTRACE, `enable_value $enable_memtrace`, [Enable memtrace])
AC_DEFINE_UNQUOTED(ENABLE_SPOOF_SOURCE, `enable_value $enable_spoof_source`, [Enable spoof source support])
AC_DEFINE_UNQUOTED(ENABLE_IPV6, `enable_value $enable_ipv6`, [Enable IPv6 support])
AC_DEFINE_UNQUOTED(ENABLE_TCP_WRAPPER, `enable_value $enable_tcp_wrapper`, [Enable TCP wrapper support])
AC_DEFINE_UNQUOTED(ENABLE_SSL, `enable_value $enable_ssl`, [Enable SSL support])
AC_DEFINE_UNQUOTED(ENABLE_SQL, `enable_value $enable_sql`, [Enable SQL support])
AC_DEFINE_UNQUOTED(ENABLE_LINUX_CAPS, `enable_value $enable_linux_caps`, [Enable Linux capability management support])
AC_DEFINE_UNQUOTED(ENABLE_PCRE, `enable_value $enable_pcre`, [Enable PCRE support])
AC_DEFINE_UNQUOTED(ENABLE_ENV_WRAPPER, `enable_value $enable_env_wrapper`, [Enable environment wrapper support])

AM_CONDITIONAL(ENABLE_ENV_WRAPPER, [test "$enable_env_wrapper" = "yes"])

AC_SUBST(timezonedir)
AC_SUBST(pidfiledir)
AC_SUBST(DEPS_CPPFLAGS)
AC_SUBST(DEPS_LIBS)
AC_SUBST(BASE_LIBS)
AC_SUBST(YFLAGS)

AC_SUBST(CURRDATE)
AC_SUBST(RELEASE_TAG)
AC_SUBST(SNAPSHOT_VERSION)
AC_SUBST(SOURCE_REVISION)
AC_SUBST(PACKAGE_FILES_SUFFIX)
AC_SUBST(PACKAGE_SUFFIX)

AC_OUTPUT(dist.conf
          Makefile 
	  syslog-ng.spec
	  src/Makefile 
	  scripts/Makefile
	  scripts/update-patterndb
	  doc/Makefile
          doc/docvars.xml
	  contrib/Makefile
	  tests/Makefile 
	  debian/Makefile
	  tgz2build/Makefile
          tests/unit/Makefile
          tests/functional/Makefile
	  tests/loggen/Makefile
          )

echo 
echo "syslog-ng Open Source Edition $VERSION configured"
echo " Compiler options:"
echo "  compiler                    : $CC"
echo "  compiler options            : $CFLAGS $CPPFLAGS"
echo "  linker flags                : $LDFLAGS $LIBS"
echo "  prefix                      : $prefix"
echo "  linking mode                : $linking_mode"
echo " Features:"
echo "  Sun STREAMS support         : ${enable_sun_streams:=no}"
echo "  Sun Door support            : ${enable_sun_door:=no}"
echo "  Debug symbols               : ${enable_debug:=no}"
echo "  GCC profiling               : ${enable_gprof:=no}"
echo "  Memtrace                    : ${enable_memtrace:=no}"
echo "  IPV6 support                : ${enable_ipv6:=no}"
echo "  spoof-source support        : ${enable_spoof_source:=no}"
echo "  tcp-wrapper support         : ${enable_tcp_wrapper:=no}"
echo "  SSL support                 : ${enable_ssl:=no}"
echo "  SQL support                 : ${enable_sql:=no}"
echo "  Linux capability support    : ${enable_linux_caps:=no}"
echo "  PCRE support                : ${enable_pcre:=no}"
echo "  Env wrapper support         : ${enable_env_wrapper:=no}"


